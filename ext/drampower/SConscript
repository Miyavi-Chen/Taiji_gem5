# -*- mode:python -*-

# Copyright (c) 2014 ARM Limited
# All rights reserved.
#
# The license below extends only to copyright in the software and shall
# not be construed as granting a license to any other intellectual
# property including but not limited to intellectual property relating
# to a hardware implementation of the functionality of the software
# licensed hereunder.  You may use the software subject to the license
# terms below provided that you ensure that this notice is replicated
# unmodified and in its entirety in all distributions of the software,
# modified or unmodified, in source code or in binary form.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Andreas Hansson

import os
import sys

Import('main')

main.Prepend(CPPPATH=Dir('./src'))

# Add the appropriate files for the library
drampower_files = []

def DRAMPowerFile(filename):
    drampower_files.append(File('./src/' + filename))

DRAMPowerFile('CommandAnalysis.cc')
DRAMPowerFile('MemArchitectureSpec.cc')
DRAMPowerFile('MemCommand.cc')
DRAMPowerFile('MemPowerSpec.cc')
DRAMPowerFile('MemTimingSpec.cc')
DRAMPowerFile('MemoryPowerModel.cc')
DRAMPowerFile('MemorySpecification.cc')
DRAMPowerFile('Parameter.cc')
DRAMPowerFile('Parametrisable.cc')
DRAMPowerFile('libdrampower/LibDRAMPower.cc')
DRAMPowerFile('CAHelpers.cc')
DRAMPowerFile('CmdHandlers.cc')
DRAMPowerFile('MemBankWiseParams.cc')

dramenv = main.Clone()

def identifyTarget(t):
    ext = t.split('.')[-1]
    if ext in target_types:
        return ext
    if obj2target.has_key(ext):
        return obj2target[ext]
    match = re.search(r'/tests/([^/]+)/', t)
    if match and match.group(1) in target_types:
        return match.group(1)
    return 'all'

# Start out with the compiler flags common to all compilers,
# i.e. they all use -g for opt and -g -pg for prof
ccflags = {'debug' : [], 'opt' : ['-g'], 'fast' : [], 'prof' : ['-g', '-pg'],
           'perf' : ['-g']}

# Start out with the linker flags common to all linkers, i.e. -pg for
# prof, and -lprofiler for perf. The -lprofile flag is surrounded by
# no-as-needed and as-needed as the binutils linker is too clever and
# simply doesn't link to the library otherwise.
ldflags = {'debug' : [], 'opt' : [], 'fast' : [], 'prof' : ['-pg'],
           'perf' : ['-Wl,--no-as-needed', '-lprofiler', '-Wl,--as-needed']}

# For Link Time Optimization, the optimisation flags used to compile
# individual files are decoupled from those used at link time
# (i.e. you can compile with -O3 and perform LTO with -O0), so we need
# to also update the linker flags based on the target.
if main['GCC']:
    if sys.platform == 'sunos5':
        ccflags['debug'] += ['-gstabs+']
    else:
        ccflags['debug'] += ['-ggdb3']
    ldflags['debug'] += ['-O0']
    # opt, fast, prof and perf all share the same cc flags, also add
    # the optimization to the ldflags as LTO defers the optimization
    # to link time
    for target in ['opt', 'fast', 'prof', 'perf']:
        ccflags[target] += ['-O3']
        ldflags[target] += ['-O3']

    ccflags['fast'] += main['LTO_CCFLAGS']
    ldflags['fast'] += main['LTO_LDFLAGS']
elif main['CLANG']:
    ccflags['debug'] += ['-g', '-O0']
    # opt, fast, prof and perf all share the same cc flags
    for target in ['opt', 'fast', 'prof', 'perf']:
        ccflags[target] += ['-O3']
else:
    print('Unknown compiler, please fix compiler options')
    Exit(1)


# To speed things up, we only instantiate the build environments we
# need.  We try to identify the needed environment for each target; if
# we can't, we fall back on instantiating all the environments just to
# be safe.
target_types = ['debug', 'opt', 'fast', 'prof', 'perf']
obj2target = {'do': 'debug', 'o': 'opt', 'fo': 'fast', 'po': 'prof',
              'gpo' : 'perf'}

needed_envs = [identifyTarget(target) for target in BUILD_TARGETS]

if len(needed_envs) != 1:
    print('len(needed_envs) != 1')
    Exit(1)

elif 'debug' in needed_envs:
    dramenv['OBJSUFFIX'] = '.do'
    dramenv['SHOBJSUFFIX'] = '.dos'
    dramenv.Append(CCFLAGS = Split(ccflags['debug']))
    dramenv.Append(LINKFLAGS = Split(ldflags['debug']))

elif 'opt' in needed_envs:
    dramenv['OBJSUFFIX'] = '.o'
    dramenv['SHOBJSUFFIX'] = '.os'
    dramenv.Append(CCFLAGS = Split(ccflags['opt']))
    dramenv.Append(LINKFLAGS = Split(ldflags['opt']))

elif 'fast' in needed_envs:
    dramenv['OBJSUFFIX'] = '.fo'
    dramenv['SHOBJSUFFIX'] = '.fos'
    dramenv.Append(CCFLAGS = Split(ccflags['fast']))
    dramenv.Append(LINKFLAGS = Split(ldflags['fast']))

elif 'prof' in needed_envs:
    dramenv['OBJSUFFIX'] = '.po'
    dramenv['SHOBJSUFFIX'] = '.pos'
    dramenv.Append(CCFLAGS = Split(ccflags['prof']))
    dramenv.Append(LINKFLAGS = Split(ldflags['prof']))

elif 'perf' in needed_envs:
    dramenv['OBJSUFFIX'] = '.gpo'
    dramenv['SHOBJSUFFIX'] = '.gpos'
    dramenv.Append(CCFLAGS = Split(ccflags['perf']))
    dramenv.Append(LINKFLAGS = Split(ldflags['perf']))

else:
    print('Unknown type')
    Exit(1)

dramenv.Library('drampower', [dramenv.SharedObject(f) \
for f in drampower_files])

main.Append(LIBS=['drampower'])
main.Prepend(LIBPATH=[Dir('.')])
